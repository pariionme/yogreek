version: '3.8'

services:
  db:
    image: postgres:14
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
      - ./init_schemas.sql:/docker-entrypoint-initdb.d/02-init-schemas.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  product_service:
    build: ./product_service
    environment:
      DB_NAME: yogreek_db
      DB_USER: yogreek
      DB_PASSWORD: yogreek123
      DB_HOST: db
      DB_PORT: 5432
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./product_service/staticfiles:/app/staticfiles
      - ./product_service/media:/app/media
    ports:
      - "8000:8000"
    networks:
      - app-network

  user_service:
    build: ./user_service
    environment:
      DB_NAME: yogreek_db
      DB_USER: yogreek
      DB_PASSWORD: yogreek123
      DB_HOST: db
      DB_PORT: 5432
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8001:8000"
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./product_service/staticfiles:/app/staticfiles
      - ./user_service/staticfiles:/app/user_staticfiles
      - ./product_service/media:/app/media
      - ./user_service/media:/app/user_media
    depends_on:
      - product_service
      - user_service
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
